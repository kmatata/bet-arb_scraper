import subprocess
import time

import pandas as pd
import pickle
from fuzzywuzzy import process, fuzz
from sympy import symbols, Eq, solve

empty_list = []
pd.set_option('display.max_rows', 500)
pd.set_option('display.max_columns', 500)
pd.set_option('display.width', 1000)


def find_surebet(frame):
    frame[['btts_x_1', 'btts_x_2']] = frame['btts_x'].apply(lambda x: x.split('\n')).apply(pd.Series).astype(float)
    frame[['btts_y_1', 'btts_y_2']] = frame['btts_y'].apply(lambda x: x.split('\n')).apply(pd.Series).astype(float)
    frame['sure_btts1'] = (1 / frame['btts_x_1']) + (1 / frame['btts_y_2'])
    frame['sure_btts2'] = (1 / frame['btts_x_2']) + (1 / frame['btts_y_1'])
    frame = frame[['Teams_x', 'btts_x', 'Teams_y', 'btts_y', 'sure_btts1', 'sure_btts2']]
    frame = frame[(frame['sure_btts1'] < 1) | (frame['sure_btts2'] < 1)]
    frame.reset_index(drop=True, inplace=True)
    return frame


def beat_bookies(odds1, odds2, total_stake):
    x, y = symbols('x y')
    eq1 = Eq(x + y - total_stake, 0)  # total_stake = x + y
    eq2 = Eq((odds2 * y) - odds1 * x, 0)  # odds1*x = odds2*y
    stakes = solve((eq1, eq2), (x, y))
    total_investment = stakes[x] + stakes[y]
    profit1 = odds1 * stakes[x] - total_stake
    profit2 = odds2 * stakes[y] - total_stake
    benefit1 = f'{profit1 / total_investment * 100:.2f}%'
    benefit2 = f'{profit2 / total_investment * 100:.2f}%'
    dict_gabmling = {'Odds1': odds1, 'Odds2': odds2, 'Stake1': f'sh{stakes[x]:.0f}', 'Stake2': f'sh{stakes[y]:.0f}',
                     'Profit1': f'sh{profit1:.2f}', 'Profit2': f'sh{profit2:.2f}',
                     'Benefit1': benefit1, 'Benefit2': benefit2}
    return dict_gabmling

if __name__ == '__main__':
    while True:
        print('BEGINNING SPIDER')
        start = time.time()
        #scrape in parallel
        subprocess.run("python3 betika_test.py & python3 betway_test.py & wait", shell=True)

        df_betika = pickle.load(open('df_betika', 'rb'))
        df_betika = df_betika[['Teams', 'btts']]
        df_betika = df_betika.mask(df_betika.eq('None')).dropna()
        df_betika = df_betika.replace(r'\-\\n\-', '0\n0', regex=True) #odds with no values
        df_betika = df_betika.replace(r'\-', '0', regex=True) #odds with no values
        df_betika = df_betika.replace(r'', '0\n0', regex=True) #odds with no values
        df_betika = df_betika.replace(r'^\d+\.\d+$', '0\n0', regex=True) # odds with only one element
        #df_mozzart = pickle.load(open('df_mozzart', 'rb'))
        #df_mozzart = df_mozzart[['Teams', 'btts']]
        #df_mozzart = df_mozzart.replace(r'', '0\n0', regex=True) #odds with no values
        #df_mozzart = df_mozzart.replace(r'^\d+\.\d+$', '0\n0', regex=True) # odds with only one elements
        df_betway = pickle.load(open('df_betway', 'rb'))
        df_betway = df_betway[['Teams', 'btts']]
        df_betway = df_betway.mask(df_betway.eq('None')).dropna()
        df_betway = df_betway.replace(r'\-\\n\-', '0\n0', regex=True) #odds with no values
        df_betway = df_betway.replace(r'\-', '0', regex=True) #odds with no values
        df_betway = df_betway.replace(r'^\n$', '0\n0', regex=True) #odds with no values
        df_betway = df_betway.replace(r'^\d+\.\d+\n$', '0\n0', regex=True) # odds with only one elements

        #2 String matching
        teams_1 = df_betika['Teams'].tolist()
        teams_3 = df_betway['Teams'].tolist()

        # team names and scores matched
        df_betika[['Teams_matched_betway', 'Score_betway']] = df_betika['Teams'].apply(lambda x:process.extractOne(x, teams_3, scorer=fuzz.token_set_ratio)).apply(pd.Series)

        df_surebet_betika_betway = pd.merge(df_betika, df_betway, left_on='Teams_matched_betway', right_on='Teams')
        df_surebet_betika_betway = df_surebet_betika_betway[df_surebet_betika_betway['Score_betway']>60]
        df_surebet_betika_betway = df_surebet_betika_betway[['Teams_x', 'btts_x', 'Teams_y', 'btts_y']]
        print(df_surebet_betika_betway)
        #3 Finding Surebets
        # Formula to find surebets


        #applying formula
        df_surebet_betika_betway = find_surebet(df_surebet_betika_betway)

        #creating dictionary
        dict_surebet = {'betika-betway':df_surebet_betika_betway}


        total_stake = 34 #set your total stake
        for frame in dict_surebet:
            if len(dict_surebet[frame])>=1:
                print('------------------SUREBETS Found! '+ frame +' (check team names)--------------------------------------------------')
                print(dict_surebet[frame])
                print('------------------Stakes-------------------------')
                for i, value in enumerate(dict_surebet[frame]['sure_btts1']):
                    if value<1:
                        odds1 = float(dict_surebet[frame].at[i, 'btts_x'].split('\n')[0])
                        odds2 = float(dict_surebet[frame].at[i, 'btts_y'].split('\n')[1])
                        teams = dict_surebet[frame].at[i, 'Teams_x'].split('v')
                        dict_1 = beat_bookies(odds1, odds2, total_stake)
                        print(str(i)+' '+'-'.join(teams)+ ' ----> '+ ' '.join('{}:{}'.format(x, y) for x,y in dict_1.items()))
                for i, value in enumerate(dict_surebet[frame]['sure_btts2']):
                    if value<1:
                        odds1 = float(dict_surebet[frame].at[i, 'btts_x'].split('\n')[1])
                        odds2 = float(dict_surebet[frame].at[i, 'btts_y'].split('\n')[0])
                        teams = dict_surebet[frame].at[i, 'Teams_x'].split('v')
                        dict_2 = beat_bookies(odds1, odds2, total_stake)
                        print(str(i) + ' ' + '-'.join(teams) + ' ----> ' + ' '.join('{}:{}'.format(x, y) for x, y in dict_2.items()))
        output = open('df_betika', 'wb')
        pickle.dump(empty_list, output)
        output.close()

        output2 = open('df_betway', 'wb')
        pickle.dump(empty_list, output2)
        output2.close()
        end = time.time()
        length = (end-start)/60
        print('TIME TAKEN: {:.1f} seconds'.format(length))
        wait = 5
        print(f'WAITING {wait} MINUTES')
        time.sleep(wait*60)
